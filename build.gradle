buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.17'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'project'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

def queryDslVersion = '5.0.0'

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'

	// Json Parser
	implementation 'com.google.code.gson:gson'

	// jwt
	implementation 'io.jsonwebtoken:jjwt:0.9.1'

	// spring-security
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// secret key
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'

	// mapstruct
	implementation 'org.mapstruct:mapstruct:1.4.2.Final'
	annotationProcessor "org.mapstruct:mapstruct-processor:1.4.2.Final"
	annotationProcessor(
			'org.projectlombok:lombok',
			'org.projectlombok:lombok-mapstruct-binding:0.1.0',
			'org.mapstruct:mapstruct-processor:1.4.2.Final'
	)

	// spring Security
	//	implementation 'org.springframework.boot:spring-boot-starter-security'
	//	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	//	testImplementation 'org.springframework.security:spring-security-test'

	// mysql driver
	implementation 'mysql:mysql-connector-java:8.0.33'

	// Swagger
	implementation group: 'io.springfox', name: 'springfox-boot-starter', version: '3.0.0'

	// S3
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	// validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// QueryDsl
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"

	//test
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

// querydsl에서 사용할 경로를 설정한다.
def querydslDir = "src/main/generated/querydsl"

// JPA 사용 여부와 사용할 경로를 설정
querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}

// build 시 사용할 sourceSet 추가한다.
sourceSets {
	main.java.srcDir querydslDir
}

// querydsl이 compileClassPath를 상속하도록 설정
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}

// querydsl 컴파일 시 사용할 옵션 설정
compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}